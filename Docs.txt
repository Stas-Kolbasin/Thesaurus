=== Assumptions ===

NB. Terms like 'word', 'synonym' etc. will be in lower-case for their 'common' meaning, and in upper case when denoting entities of the system.

The purpose of this software is to implement a thesaurus, presumably in English.

The obvious entity a thesaurus has to work with is *Word*. The tricky part is that words
1) have different forms, even in English;
2) usually have multiple meanings, each with a distinct set of synonyms (_especially_ in English);
2a) may be expressed as different parts of speech.

As for word forms, online thesauri that I've checked (thesaurus.com, merriam-webster.com, collinsdictionary.com, dictionary.com, lexico.com, macmillandictionary.com) do not really support this. My guess is that people who use thesauri usually can write the word's base right. Anyway, supporting different forms doesn't seem absolutely necessary for MVP.

As for meanings, we absolutely have to include them into the Word entity, for example as *Meaning* sub-entities. Each Meaning necessarily corresponds to a certain *Part of Speech* (i.e. if a word can be interpreted as two different parts of speech, these two interpretations cannot have the same meaning). From parts of speech we should cover at least verb, noun, adverb, and adjective.

*Synonym*, as it is another word with a close meaning, should be linked to a Meaning, not to a Word. It would make sense to implement Synonyms simply as links between Meanings, but this would make filling the Thesaurus difficult at first: to link a Meaning to a Synonym, we would have to first 'register' a Word for this Synonym. Thus Synonyms will be separate sub-entities; we will probably need to add search for their corresponding Words in future. Based on the main user stories, it is OK if synonyms don't lead to registered Words yet.

=== The domain ===

*Word* is the main entity that contains
- Base: the set of characters to which all the Meanings can be linked to, the header for all the word info in GUI. For example, all Meanings for 'a bow' and 'to bow' should be linked to a single Word with Base 'bow'.
- Meanings: an array of Meaning entities.

*Meaning* includes
- Description: what this Meaning actually means.
- PartOfSpeech: the part of speech this meaning is attributed to. E.g., for 'bow' meaning of 'a curved rod used to shoot projectiles' PartOfSpeech is Noun, for 'bend in waist' - Verb, etc.
- Synonyms: an array of Synonym entities.

*Synonym* includes
- Base: Base of the corresponding Word, if there is one.
- Word?: a link to the corresponding Word?

=== Feature I ('Service Layer') ===

A library that provides a service class for Word management.

NB. Below is listed the functionality absolutely necessary for the user stories, _and_ some optional, marked by tildas.

*WordService*
1. Create Word (including linked Meanings, Forms, and Synonyms)
2.~ Update Word
3.~ Delete Word
4. Get Word (by Base)
5. Get All Words (Bases only).

To manage linked objects, WordService should also use sub-entity services:

*MeaningService* (all internal)
1. Create
2. Get (by Word)
3.~ Update
4.~ Delete

*SynonymService* (all internal)
1. Create
2. Get (by Meaning)
3.~ Update
4.~ Delete

Underneath the service layer we implement an abstract persistence layer, e.g. Word-, Meaning-, and SynonymRepositories, with mostly the same methods.

Concrete implementation of layers should be in-memory first (we might use this for tests anyway), and then a DB, e.g. SQLite.
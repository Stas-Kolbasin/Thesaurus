=== Assumptions ===

NB. Terms like 'word', 'synonym' etc. will be in lower-case for their 'common' meaning, and in upper case when denoting entities of the system.

The purpose of this software is to implement a thesaurus, presumably in English.

The obvious entity a thesaurus has to work with is *Word*. The tricky part is that words
1) have different forms, even in English;
2) usually have multiple meanings, each with a distinct set of synonyms (_especially_ in English);
2a) may be expressed as different parts of speech.

As for word forms, online thesauri that I've checked (thesaurus.com, merriam-webster.com, collinsdictionary.com, dictionary.com, lexico.com, macmillandictionary.com) do not really support this. My guess is that people who use thesauri usually can write the word's base right. Anyway, supporting different forms doesn't seem absolutely necessary for MVP.

As for meanings, we absolutely have to include them into the Word entity, for example as *Meaning* sub-entities. Each Meaning necessarily corresponds to a certain *Part of Speech* (i.e. if a word can be interpreted as two different parts of speech, these two interpretations cannot have the same meaning). From parts of speech we should cover at least verb, noun, adverb, and adjective.

*Synonym*, as it is another word with a close meaning, should be linked to a Meaning, not to a Word. It would make sense to implement Synonyms simply as links between Meanings, but this would make filling the Thesaurus difficult at first: to link a Meaning to a Synonym, we would have to first 'register' a Word for this Synonym. Thus Synonyms will be separate sub-entities; we will probably need to add search for their corresponding Words in future. Based on the main user stories, it is OK if synonyms don't lead to registered Words yet.

=== The domain ===

*Word* is the main entity that contains
- Base: the set of characters to which all the Meanings can be linked to, the header for all the word info in GUI. For example, all Meanings for 'a bow' and 'to bow' should be linked to a single Word with Base 'bow'.
- Meanings: an array of Meaning entities.

*Meaning* includes
- Description: what this Meaning actually means.
- PartOfSpeech: the part of speech this meaning is attributed to. E.g., for 'bow' meaning of 'a curved rod used to shoot projectiles' PartOfSpeech is Noun, for 'bend in waist' - Verb, etc.
- Synonyms: an array of Synonym entities.

*Synonym* includes
- Base: Base of the corresponding Word, if there is one.
- Word?: a link to the corresponding Word?

=== Feature I ('Service Layer') ===

A library that provides a service class for Word management.

NB. Below is listed the functionality absolutely necessary for the user stories, _and_ some optional, marked by tildas.

*WordService*
1. Create Word (including linked Meanings and Synonyms)
2.~ Update Word
3.~ Delete Word
4. Get Word (by Base)
5. Get All Words (Bases only).

Underneath the service layer we implement the WordRepository, first in-memory (we will probably need this for tests anyway), and then in DB, such as SQLite.

In DB, Words don't even need a dedicated Primary Key: Base is literally what defines a word, thus we could always use this.

It seems we really don't need separate services or repositories for sub-entities. Words can easily be saved as JSON documents including Meanings and Synonyms:
* hardly ever will we need Meanings and Synonyms separately
* this will make management of Words easier (especially editing sub-entities: just swap Word's JSONs)
* caching will be easier, as we would just keep the whole Word data in one place (and invalidate it as a whole too)

Potential problems (and why they are not so important):
* concurrency-wise this could be more demanding; this is a lesser concern, Thesaurus will probably be mostly one-way: constantly reading data, sometimes adding new, and rarely editing
* as data is very much denormalized, we will need more disk space; yet English has say 1M words - even if each entry takes 1KB, we will hardly have DB larger than 1GB. Something to think about with regards to SQLite, but not for production-scale DBMSs.